package ride;

enum EdgeStyle {
  EDGESTYLE_NONE = 0;
  EDGESTYLE_LINE = 1;
  EDGESTYLE_BACKGROUND = 2;
}

enum ViewWhitespace {
  VIEWWHITESPACE_HIDDEN = 0;
  VIEWWHITESPACE_ALWAYS = 1;
  VIEWWHITESPACE_AFTER_IDENT = 2;
}

enum WrapMode {
  WRAPMODE_NONE = 0;
  WRAPMODE_CHAR = 1;
  WRAPMODE_WORD = 2;
}

message FoldFlags {
  optional bool LINEBEFORE_EXPANDED = 1;
  optional bool LINEBEFORE_CONTRACTED = 2;
  optional bool LINEAFTER_EXPANDED = 3;
  optional bool LINEAFTER_CONTRACTED = 4;
  optional bool LEVELNUMBERS = 5;
};

message Color {
	optional int32 r = 1;
	optional int32 g = 2;
	optional int32 b = 3;
}

message Style {
  optional bool use_typeface = 1;
  optional string typeface = 2;

  optional bool use_bold = 3;
  optional bool bold = 4;

  optional bool use_italic = 5;
  optional bool italic = 6;

  optional bool use_underline = 7;
  optional bool underline = 8;

  optional bool use_font_size = 9;
  optional int32 font_size = 10;

  optional bool use_foreground = 11;
  optional Color foreground = 12;

  optional bool use_background = 13;
  optional Color background = 14;
};

// the idea of moving out all fonts and colors is that likely theese are
// what people want share: obsidian/zenburn/monokai and https://studiostyl.es/
message FontsAndColors {
  optional Style default_style = 29;
  optional Style bracelight_style = 30;
  optional Style bracebad_style = 31;
  optional Style controlchar_style = 32;
  optional Style indentguide_style = 33;
  optional Style calltip_style = 34;

  optional Color edgeColor = 8;

  optional Style C_DEFAULT = 100;
  optional Style C_COMMENT = 101;
  optional Style C_COMMENTLINE = 102;
  optional Style C_COMMENTDOC = 103;
  optional Style C_NUMBER = 104;
  optional Style C_WORD = 105;
  optional Style C_STRING = 106;
  optional Style C_CHARACTER = 107;
  optional Style C_UUID = 108;
  optional Style C_PREPROCESSOR = 109;
  optional Style C_OPERATOR = 110;
  optional Style C_IDENTIFIER = 111;
  optional Style C_STRINGEOL = 112;
  optional Style C_VERBATIM = 113;
  optional Style C_REGEX = 114;
  optional Style C_COMMENTLINEDOC = 115;
  optional Style C_WORD2 = 116;
  optional Style C_COMMENTDOCKEYWORD = 117;
  optional Style C_COMMENTDOCKEYWORDERROR = 118;
  optional Style C_GLOBALCLASS = 119;
  optional Style C_STRINGRAW = 120;
  optional Style C_TRIPLEVERBATIM = 121;
  optional Style C_HASHQUOTEDSTRING = 122;
  optional Style C_PREPROCESSORCOMMENT = 123;
}

message Settings {
  optional bool lineNumberEnable = 1 [default=true];
  optional bool foldEnable = 2 [default=true];
  optional bool displayEOLEnable = 3;
  optional bool indentGuideEnable = 4 [default=true];
  optional ViewWhitespace whitespace = 5;
  optional WrapMode wordWrap = 6;

  optional EdgeStyle edgeStyle = 7 [default=EDGESTYLE_LINE];
  
  optional FontsAndColors fonts_and_colors = 8;

  optional int32 edgeColumn = 9 [default=80];

  optional int32 tabWidth = 10 [default=4];
  optional bool useTabs = 11 [default=false];
  optional bool tabIndents = 12 [default=true];
  optional bool backspaceUnindents = 13 [default=true];

  optional FoldFlags foldflags = 14;

  // C++
  optional bool foldComment = 15 [default=true];
  optional bool foldCompact = 16 [default=true];
  optional bool foldPreproc = 17 [default=true];

  optional bool     styling_within_preprocessor = 18 [default=false];     //  For C++ code determines whether all preprocessor code is styled in the preprocessor style (0, the default) or only from the initial # to the end of the command word(1).
  optional bool     lexer_cpp_allow_dollars = 19 [default=false];         // Set to 0 to disallow the '$' character in identifiers with the cpp lexer.
  optional bool     lexer_cpp_track_preprocessor = 20 [default=false];    //  Set to 1 to interpret #if/#else/#endif to grey out code that is not active.
  optional bool     lexer_cpp_update_preprocessor = 21 [default=false];   //  Set to 1 to update preprocessor definitions when #define found.
  optional bool     lexer_cpp_triplequoted_strings = 22 [default=false];  //  Set to 1 to enable highlighting of triple-quoted strings.
  optional bool     lexer_cpp_hashquoted_strings = 23 [default=false];    //  Set to 1 to enable highlighting of hash-quoted strings.
  optional bool     fold_cpp_syntax_based = 24 [default=true];           //  Set this property to 0 to disable syntax based folding.
  optional bool     fold_cpp_comment_multiline = 25 [default=true];      //  Set this property to 0 to disable folding multi-line comments when fold.comment=1.
  optional bool     fold_cpp_comment_explicit = 26 [default=true];       //  Set this property to 0 to disable folding explicit fold points when fold.comment=1.
  optional bool     fold_cpp_explicit_anywhere = 27 [default=false];      //  Set this property to 1 to enable explicit fold points anywhere, not just in line comments.
  optional bool     fold_at_else = 28 [default=true];                    //  This option enables C++ folding on a "} else {" line of an if statement.
}
