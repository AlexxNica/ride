package ride;

enum EdgeStyle {
  EDGESTYLE_NONE = 0;
  EDGESTYLE_LINE = 1;
  EDGESTYLE_BACKGROUND = 2;
}

enum ViewWhitespace {
  VIEWWHITESPACE_HIDDEN = 0;
  VIEWWHITESPACE_ALWAYS = 1;
  VIEWWHITESPACE_AFTER_IDENT = 2;
}

enum WrapMode {
  WRAPMODE_NONE = 0;
  WRAPMODE_CHAR = 1;
  WRAPMODE_WORD = 2;
}

enum IndicatorStyle {
  INDICATORSTYLE_PLAIN = 0;
  INDICATORSTYLE_SQUIGGLE = 1;
  INDICATORSTYLE_TT = 2;
  INDICATORSTYLE_DIAGONAL = 3;
  INDICATORSTYLE_STRIKE = 4;
  INDICATORSTYLE_HIDDEN = 5;
  INDICATORSTYLE_BOX = 6;
  INDICATORSTYLE_ROUNDBOX = 7;
  INDICATORSTYLE_STRAIGHTBOX = 8;
  INDICATORSTYLE_DASH = 9;
  INDICATORSTYLE_DOTS = 10;
  INDICATORSTYLE_SQUIGGLELOW = 11;
  INDICATORSTYLE_DOTBOX = 12;
}

message Indicator {
	optional IndicatorStyle style = 1 [default=INDICATORSTYLE_HIDDEN];
	optional Color foreground = 2;
	optional bool under = 3 [default=true];
	optional int32 alpha = 4 [default=255];
	optional int32 outline_alpha = 5 [default=255];
}

message FoldFlags {
  optional bool LINEBEFORE_EXPANDED = 1;
  optional bool LINEBEFORE_CONTRACTED = 2;
  optional bool LINEAFTER_EXPANDED = 3;
  optional bool LINEAFTER_CONTRACTED = 4;
  optional bool LEVELNUMBERS = 5;
};

message Color {
	optional int32 r = 1;
	optional int32 g = 2;
	optional int32 b = 3;
}

message Style {
  optional bool use_typeface = 1;
  optional string typeface = 2;

  optional bool use_bold = 3;
  optional bool bold = 4;

  optional bool use_italic = 5;
  optional bool italic = 6;

  optional bool use_underline = 7;
  optional bool underline = 8;

  optional bool use_font_size = 9;
  optional int32 font_size = 10;

  optional bool use_foreground = 11;
  optional Color foreground = 12;

  optional bool use_background = 13;
  optional Color background = 14;
};

// the idea of moving out all fonts and colors is that likely theese are
// what people want share: obsidian/zenburn/monokai and https://studiostyl.es/
message FontsAndColors {
  optional Style default_style = 29;
  optional Style bracelight_style = 30;
  optional Style bracebad_style = 31;
  optional Style controlchar_style = 32;
  optional Style indentguide_style = 33;
  optional Style calltip_style = 34;

  optional Color edgeColor = 8;

  optional Style c_default = 100;
  optional Style c_comment = 101;
  optional Style c_commentline = 102;
  optional Style c_commentdoc = 103;
  optional Style c_number = 104;
  optional Style c_word = 105;
  optional Style c_string = 106;
  optional Style c_character = 107;
  optional Style c_uuid = 108;
  optional Style c_preprocessor = 109;
  optional Style c_operator = 110;
  optional Style c_identifier = 111;
  optional Style c_stringeol = 112;
  optional Style c_verbatim = 113;
  optional Style c_regex = 114;
  optional Style c_commentlinedoc = 115;
  optional Style c_word2 = 116;
  optional Style c_commentdockeyword = 117;
  optional Style c_commentdockeyworderror = 118;
  optional Style c_globalclass = 119;
  optional Style c_stringraw = 120;
  optional Style c_tripleverbatim = 121;
  optional Style c_hashquotedstring = 122;
  optional Style c_preprocessorcomment = 123;

  optional Style markdown_default = 200;
  optional Style markdown_line_begin = 201;
  optional Style markdown_strong1 = 202;
  optional Style markdown_strong2 = 203;
  optional Style markdown_em1 = 204;
  optional Style markdown_em2 = 205;
  optional Style markdown_header1 = 206;
  optional Style markdown_header2 = 207;
  optional Style markdown_header3 = 208;
  optional Style markdown_header4 = 209;
  optional Style markdown_header5 = 210;
  optional Style markdown_header6 = 211;
  optional Style markdown_prechar = 212;
  optional Style markdown_ulist_item = 213;
  optional Style markdown_olist_item = 214;
  optional Style markdown_blockquote = 215;
  optional Style markdown_strikeout = 216;
  optional Style markdown_hrule = 217;
  optional Style markdown_link = 218;
  optional Style markdown_code = 219;
  optional Style markdown_code2 = 220;
  optional Style markdown_codebk = 221;
  
  optional Style props_default = 300;
  optional Style props_comment = 301;
  optional Style props_section = 302;
  optional Style props_assignment = 303;
  optional Style props_defval = 304;
  optional Style props_key = 305;
  
  optional Style h_default = 400;
  optional Style h_tag = 401;
  optional Style h_tagunknown = 402;
  optional Style h_attribute = 403;
  optional Style h_attributeunknown = 404;
  optional Style h_number = 405;
  optional Style h_doublestring = 406;
  optional Style h_singlestring = 407;
  optional Style h_other = 408;
  optional Style h_comment = 409;
  optional Style h_entity = 410;
  optional Style h_tagend = 411;
  optional Style h_xmlstart = 412;
  optional Style h_xmlend = 413;
  optional Style h_script = 414;
  optional Style h_asp = 415;
  optional Style h_aspat = 416;
  optional Style h_cdata = 417;
  optional Style h_question = 418;
  optional Style h_value = 419;
  optional Style h_xccomment = 420;
  
  optional Style cmake_default = 500;
  optional Style cmake_comment = 501;
  optional Style cmake_stringdq = 502;
  optional Style cmake_stringlq = 503;
  optional Style cmake_stringrq = 504;
  optional Style cmake_commands = 505;
  optional Style cmake_parameters = 506;
  optional Style cmake_variable = 507;
  optional Style cmake_userdefined = 508;
  optional Style cmake_whiledef = 509;
  optional Style cmake_foreachdef = 510;
  optional Style cmake_ifdefinedef = 511;
  optional Style cmake_macrodef = 512;
  optional Style cmake_stringvar = 513;
  optional Style cmake_number = 514;
  
  optional Style lua_default = 600;
  optional Style lua_comment = 601;
  optional Style lua_commentline = 602;
  optional Style lua_commentdoc = 603;
  optional Style lua_number = 604;
  optional Style lua_word = 605;
  optional Style lua_string = 606;
  optional Style lua_character = 607;
  optional Style lua_literalstring = 608;
  optional Style lua_preprocessor = 609;
  optional Style lua_operator = 610;
  optional Style lua_identifier = 611;
  optional Style lua_stringeol = 612;
  optional Style lua_word2 = 613;
  optional Style lua_word3 = 614;
  optional Style lua_word4 = 615;
  optional Style lua_word5 = 616;
  optional Style lua_word6 = 617;
  optional Style lua_word7 = 618;
  optional Style lua_word8 = 619;
  optional Style lua_label = 620;
  
  optional Style yaml_default = 700;
  optional Style yaml_comment = 701;
  optional Style yaml_identifier = 702;
  optional Style yaml_keyword = 703;
  optional Style yaml_number = 704;
  optional Style yaml_reference = 705;
  optional Style yaml_document = 706;
  optional Style yaml_text = 707;
  optional Style yaml_error = 708;
  optional Style yaml_operator = 709;
}

message Settings {
  optional bool lineNumberEnable = 1 [default=true];
  optional bool foldEnable = 2 [default=true];
  optional bool displayEOLEnable = 3;
  optional bool indentGuideEnable = 4 [default=true];
  optional ViewWhitespace whitespace = 5;
  optional WrapMode wordWrap = 6;

  optional EdgeStyle edgeStyle = 7 [default=EDGESTYLE_LINE];
  
  optional FontsAndColors fonts_and_colors = 8;

  optional int32 edgeColumn = 9 [default=80];

  optional int32 tabWidth = 10 [default=4];
  optional bool useTabs = 11 [default=false];
  optional bool tabIndents = 12 [default=true];
  optional bool backspaceUnindents = 13 [default=true];

  optional FoldFlags foldflags = 14;

  // indicators
  optional Indicator indicator_error = 100;
  optional Indicator indicator_warning = 101;
  optional Indicator indicator_search_highlight = 102;
  optional Indicator indicator_select_highlight = 103;

  // settings for c++
  optional bool foldComment = 200 [default=true];
  optional bool foldCompact = 201 [default=true];
  optional bool foldPreproc = 202 [default=true];

  optional bool     styling_within_preprocessor = 203 [default=false];     //  For C++ code determines whether all preprocessor code is styled in the preprocessor style (0, the default) or only from the initial # to the end of the command word(1).
  optional bool     lexer_cpp_allow_dollars = 204 [default=false];         // Set to 0 to disallow the '$' character in identifiers with the cpp lexer.
  optional bool     lexer_cpp_track_preprocessor = 205 [default=false];    //  Set to 1 to interpret #if/#else/#endif to grey out code that is not active.
  optional bool     lexer_cpp_update_preprocessor = 206 [default=false];   //  Set to 1 to update preprocessor definitions when #define found.
  optional bool     lexer_cpp_triplequoted_strings = 207 [default=false];  //  Set to 1 to enable highlighting of triple-quoted strings.
  optional bool     lexer_cpp_hashquoted_strings = 208 [default=false];    //  Set to 1 to enable highlighting of hash-quoted strings.
  optional bool     fold_cpp_syntax_based = 209 [default=true];           //  Set this property to 0 to disable syntax based folding.
  optional bool     fold_cpp_comment_multiline = 210 [default=true];      //  Set this property to 0 to disable folding multi-line comments when fold.comment=1.
  optional bool     fold_cpp_comment_explicit = 211 [default=true];       //  Set this property to 0 to disable folding explicit fold points when fold.comment=1.
  optional bool     fold_cpp_explicit_anywhere = 212 [default=false];      //  Set this property to 1 to enable explicit fold points anywhere, not just in line comments.
  optional bool     fold_at_else = 213 [default=true];                    //  This option enables C++ folding on a "} else {" line of an if statement.
}
